
INCLUDE(FindPythonInterp)

IF(MSVC)
  SET(TESTNGPP_DISABLE_SANDBOX TRUE)
  SET(TESTNGPP_DISABLE_RC TRUE)
ENDIF(MSVC)
  
IF(NOT DEFINED TESTNGPP_DISABLE_RC)
  SET(TESTNGPP_DISABLE_RC FALSE)
ENDIF(NOT DEFINED TESTNGPP_DISABLE_RC)

IF(NOT DEFINED TESTNGPP_DISABLE_SANDBOX)
  SET(TESTNGPP_DISABLE_SANDBOX FALSE)
ENDIF(NOT DEFINED TESTNGPP_DISABLE_SANDBOX)

IF(TESTNGPP_DISABLE_RC)
  ADD_DEFINITIONS(-DTESTNGPP_DISABLE_RC=1)
ELSE(TESTNGPP_DISABLE_RC)
  ADD_DEFINITIONS(-DTESTNGPP_DISABLE_RC=0)
ENDIF(TESTNGPP_DISABLE_RC)

IF(TESTNGPP_DISABLE_SANDBOX)
  ADD_DEFINITIONS(-DTESTNGPP_DISABLE_SANDBOX=1)
ELSE(TESTNGPP_DISABLE_SANDBOX)
  ADD_DEFINITIONS(-DTESTNGPP_DISABLE_SANDBOX=0)
ENDIF(TESTNGPP_DISABLE_SANDBOX)

IF(PYTHONINTERP_FOUND)
  SET(PYTHON ${PYTHON_EXECUTABLE})
ELSE(PYTHONINTERP_FOUND)
  MESSAGE(FATAL_ERROR "No Python interpreter found")
ENDIF(PYTHONINTERP_FOUND)

ADD_DEFINITIONS(
    -DPACKAGE_NAME=${PACKAGE_NAME}
    -DPACKAGE_STRING=${PACKAGE_STRING}
    -DPACKAGE_BUGREPORT=${PACKAGE_BUGREPORT}
    -DPACKAGE_URL=${PACKAGE_URL}
    -DPACKAGE=${PACKAGE}
    -DVERSION=${VERSION}
)

IF(CMAKE_SYSTEM_NAME MATCHES Linux)
  IF(CMAKE_COMPILER_IS_GNUCXX)
    SET(CMAKE_MODULE_LINKER_FLAGS "-Wl,--fatal-warnings -Wl,--no-undefined")
  ENDIF(CMAKE_COMPILER_IS_GNUCXX)
ENDIF(CMAKE_SYSTEM_NAME MATCHES Linux)

SET(SANDBOX_UT_CASES
  TestTestCaseSandboxResultReporter.h 
  TestPipeReadableChannel.h 
  TestPipeWrittableChannel.h 
  TestTestFixtureSandboxRunner.h 
  TestSandboxProcessor.h
  TestSandbox.h 
  TestTestCaseSandbox.h 
)

SET(UT_CASES
  TestTestCase.h 
  TestAssertionFailure.h 
  TestTestFixtureDesc.h 
  TestTestSuiteDesc.h 
  TestStringToOptions.h 
  TestExceptionKeywords.h
  TestSimpleTestSuiteResultReporter.h 
  TestSimpleTestCaseRunner.h
  TestPosixFNMatcher.h 
  TestGeneralTestFilter.h 
  TestTestFilterFactory.h 
  TestOrCompositeTestFilter.h
  TestXMLTestListener.h 
  TestXMLBuilder.h
  TestTestCaseHierarchy.h
  TestTagsParser.h
)

IF(NOT TESTNGPP_DISABLE_SANDBOX)
  SET(UT_CASES ${UT_CASES} ${SANDBOX_UT_CASES})
ENDIF(NOT TESTNGPP_DISABLE_SANDBOX)

LINK_DIRECTORIES(
  ${CMAKE_BINARY_DIR}/libs
  ${CMAKE_BINARY_DIR}/src
  ${CMAKE_BINARY_DIR}/src/listeners
  ${CMAKE_BINARY_DIR}/src/runner 
  ${CMAKE_BINARY_DIR}/3rdparty/mockcpp/src)

INCLUDE_DIRECTORIES(BEFORE 
  .
  ${CMAKE_SOURCE_DIR}/src
  ${CMAKE_SOURCE_DIR}/include
  ${CMAKE_SOURCE_DIR}/include/testngpp
  ${CMAKE_SOURCE_DIR}/include/testngpp/internal
  ${CMAKE_SOURCE_DIR}/include/testngpp/runner
  ${CMAKE_SOURCE_DIR}/include/testngpp/comm
  ${CMAKE_SOURCE_DIR}/include/testngpp/utils
  ${CMAKE_SOURCE_DIR}/3rdparty/cxxtest
  ${CMAKE_SOURCE_DIR}/3rdparty/mockcpp/3rdparty
  ${CMAKE_SOURCE_DIR}/3rdparty/mockcpp/include
  )

SET(TEST_GENERATOR ${CMAKE_SOURCE_DIR}/3rdparty/cxxtest/cxxtestgen.py --have-eh --have-std --part )
SET(TESTCASE_PREFIX testngpp-ut)
SET(INDEX 0)

FOREACH(CASE ${UT_CASES})
  GET_FILENAME_COMPONENT(CASE_NAME ${CASE} NAME_WE)
  SET(CASE_SRC ${CMAKE_CURRENT_SOURCE_DIR}/${CASE_NAME}.cpp)
  MATH(EXPR INDEX "${INDEX}+1")

  ADD_CUSTOM_TARGET(${CASE_NAME} DEPENDS ${CASE_SRC})

  SET(CASE_MODULE ${TESTCASE_PREFIX}-${INDEX})

  ADD_EXECUTABLE(${CASE_MODULE} ${CASE_SRC})

  TARGET_LINK_LIBRARIES(${CASE_MODULE}
    cxxtest 
    mockcpp 
    testngpp 
    testngpp-runner-lib 
    testngppxmllistener-fortest)

  ADD_CUSTOM_COMMAND(
    OUTPUT ${CASE_SRC}
    COMMAND ${PYTHON} ${TEST_GENERATOR} -o ${CASE_SRC} ${CMAKE_CURRENT_SOURCE_DIR}/${CASE}
  )

  ADD_DEPENDENCIES(${CASE_MODULE} ${CASE_NAME})
ENDFOREACH()


